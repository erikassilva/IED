/*Exercício 3. Balanceamento de parênteses
Usando pilha, crie uma função para verificar se uma expressão composta apenas por chaves,
colchetes e parênteses, representada por uma cadeia, está ou não balanceada. Por exemplo, as
expressões "[{()()}{}]" e "{[([{}])]}" estão balanceadas, mas as expressões
"{[(}])" e "{[)()(]}" não estão.*/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "pilha.h"

bool verificaPar(char pontuacao1, char pontuacao2){
	if(pontuacao1 =='(' && pontuacao2 == ')') return 1;
	else if(pontuacao1 =='[' && pontuacao2 == ']') return 1;
	else if(pontuacao1 =='{' && pontuacao2 == '}') return 1;
	else return 0;
}

bool verificaPontuacao(char expressaoMatematica[]){
	int i = 0;
	Pilha P = pilha(30);
	
	for (i=0; expressaoMatematica[i]; i++){	
		if (expressaoMatematica[i] == '{' || expressaoMatematica[i] == '(' || expressaoMatematica[i] == '[') empilha(expressaoMatematica[i], P);
		if (expressaoMatematica[i] == '}' || expressaoMatematica[i] == ')' || expressaoMatematica[i] == ']') { 
			if (vaziap(P)) return 0;
            else if (!verificaPar(desempilha(P), expressaoMatematica[i])) return 0;}}
	if (vaziap(P)) return 1; 
    else return 0; }

int main(void){
	
	char expressao[30];
	
	printf("Expressao: ");
	gets(expressao);
	if(verificaPontuacao(expressao)) puts("Expressao balanceada!");
	else puts("Expressao nao balanceada!");
	
	return 0;
}
